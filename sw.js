// Change this to your repository name
var GHPATH = '/';

// Choose a different app prefix name
var APP_PREFIX = 'sppwa_';

// The version of the cache. Every time you change any of the files
// you need to change this version (version_01, version_02â€¦). 
// If you don't change the version, the service worker will give your
// users the old files!
var VERSION = 'version_00';

// The files to make available for offline use. make sure to add 
// others to this list
var URLS = [    
  `${GHPATH}/`,
  `${GHPATH}/index.html`,
  `${GHPATH}/sass/main.scss`,
  `${GHPATH}/js/app.js`
];
// Set this to true for production
var doCache = true;

// Delete old caches that are not our current one!
self.addEventListener("activate", event => {
  const cacheWhitelist = [APP_PREFIX];
  event.waitUntil(
      caches.keys()
          .then(keyList =>
              Promise.all(keyList.map(key => {
                  if (!cacheWhitelist.includes(key)) {
                      console.log('Deleting cache: ' + key);
                      return caches.delete(key);
                  }
              }))
          )
  );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function (event) {
  if (doCache) {
      event.waitUntil(
          caches.open(APP_PREFIX)
              .then(function (cache) {
                  // Get the assets manifest so we can see what our js file is named
                  // This is because webpack hashes it
                  fetch("asset-manifest.json")
                      .then(response => {
                          response.json();
                      })
                      .then(assets => {
                          // Open a cache and cache our files
                          // We want to cache the page and the main.js generated by webpack
                          // We could also cache any static assets like CSS or images
                        
                          cache.addAll(URLS);
                          console.log('cached');
                      });
              })
      );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function (event) {
  if (doCache) {
      event.respondWith(
          caches.match(event.request).then(function (response) {
              return response || fetch(event.request);
          })
      );
  }
});